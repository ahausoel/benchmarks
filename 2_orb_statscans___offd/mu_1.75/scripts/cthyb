#!/usr/bin/env python

import sys, os, time
sys.path.append(os.getcwd() + "/..")
sys.path.append(os.getcwd() + "/../../../common/")
from model import *

from pytriqs.archive import HDFArchive
from pytriqs.utility import mpi
from triqs_cthyb import Solver, version

import argparse
parser = argparse.ArgumentParser(description="As argument can be given the max_time in seconds.")

parser.add_argument("-t", type=int, help="max_time", default=0)
args = parser.parse_args()

print 'args.t', args.t

max_time = args.t
print 'max_time', max_time

# --------- Construct the CTHYB solver ----------
constr_params = {
        'beta' : beta,
        'gf_struct' : gf_struct,
        'n_iw' : n_iw,
        'n_tau' : 100000
        }
S = Solver(**constr_params)

# --------- Initialize G0_iw ----------
S.G0_iw << G0_iw

# --------- Solve! ----------
solve_params = {
        'h_int' : h_int,
        'n_warmup_cycles' : 1000,
        'n_cycles' : 10000000,
        'max_time' : max_time,
        'length_cycle' : 100,
        'move_double' : True
        }
start = time.time()
S.solve(**solve_params)
end = time.time()

# -------- Save in archive ---------
if mpi.is_master_node():

    folder = "../results_"+str(max_time)+"/"
    if not os.path.exists(folder):
          os.makedirs(folder)

    with HDFArchive(folder+"cthyb.h5",'w') as results:
        results["G"] = S.G_iw
        results["G_tau"] = S.G_tau

        import inspect
        import __main__
        results.create_group("Solver_Info")
        info_grp = results["Solver_Info"]
        info_grp["solver_name"] = "triqs_cthyb"
        info_grp["constr_params"] = constr_params
        info_grp["solve_params"] = solve_params
        info_grp["solver"] = S
        info_grp["solver_version"] = version.version
        info_grp["solver_git_hash"] = version.cthyb_hash
        info_grp["triqs_git_hash"] = version.triqs_hash
        info_grp["script"] = inspect.getsource(__main__)
        info_grp["num_threads"] = mpi.world.Get_size()
        info_grp["run_time"] = end - start
