#!/usr/bin/env python

import sys, os, time
sys.path.append(os.getcwd() + "/..")
sys.path.append(os.getcwd() + "/../../common")
from model import *

from pytriqs.archive import HDFArchive
from pytriqs.utility import mpi
from w2dyn_cthyb import Solver #, version

# --------- Construct the W2dyn CTHYB solver ----------
constr_params = {
        'beta' : beta,
        'gf_struct' : gf_struct,
        'n_iw' : n_iw,
        'n_tau' : n_tau,
        'complex' : False,
        'delta_interface' : True
        }
S = Solver(**constr_params)

# --------- Initialize G0_iw ----------
#S.G0_iw << G0_iw

S.Delta_tau << Delta_tau

# --------- Solve! ----------
solve_params = {
        'h_int' : h_int,
        'n_warmup_cycles' : 1000,
        'n_cycles' : 3000,
        'length_cycle' : 100,
        'h_0' : h_0
        }

start = time.time()
S.solve(**solve_params)
end = time.time()

# -------- Save in archive ---------
if mpi.is_master_node():
    with HDFArchive("../results/w2dyn_cthyb.h5",'w') as results:
        results["G"] = S.G_iw
        results["G_tau"] = S.G_tau
	print "g written"

        import inspect
        import __main__
        results.create_group("Solver_Info")
        info_grp = results["Solver_Info"]
        info_grp["solver_name"] = "w2dyn_cthyb"
        info_grp["constr_params"] = constr_params
        info_grp["solve_params"] = solve_params
        #FIXME
        #info_grp["solver"] = S
        #info_grp["solver_version"] = version.version
        #info_grp["solver_git_hash"] = version.w2dyn_cthyb_hash
        #info_grp["triqs_git_hash"] = version.triqs_hash
        info_grp["script"] = inspect.getsource(__main__)
        info_grp["num_threads"] = mpi.world.Get_size()
        info_grp["run_time"] = end - start
